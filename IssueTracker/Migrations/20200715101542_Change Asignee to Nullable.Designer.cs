// <auto-generated />
using System;
using IssueTracker.Models.Datas;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IssueTracker.Migrations
{
    [DbContext(typeof(IssueTrackerDbContext))]
    [Migration("20200715101542_Change Asignee Ticket to Nullable")]
    partial class ChangeAsigneeTickettoNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MST_CATEGORY");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.CategoryHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<short>("Operation")
                        .HasColumnType("smallint");

                    b.HasKey("TransactionId", "Id", "Seq");

                    b.HasIndex("Id");

                    b.ToTable("HIS_CATEGORY");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<short>("LogLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasName("TR_LOG_EVENT_ID_INDEX");

                    b.HasIndex("LogLevel")
                        .HasName("TR_LOG_LEVEL_INDEX");

                    b.HasIndex("Name")
                        .HasName("TR_LOG_NAME_INDEX");

                    b.ToTable("TR_LOG");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TableTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HIS_TRANSACTION");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.Ticket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("AssigneeId")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .HasName("TR_TICKET_NAME_INDEX");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StatusId");

                    b.ToTable("TR_TICKET");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TicketHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("AssigneeId")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<short>("Operation")
                        .HasColumnType("smallint");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("TransactionId", "Id", "Seq");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StatusId");

                    b.ToTable("HIS_TICKET");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TicketStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("MST_TICKET_STATUS");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TicketStatusHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short>("Operation")
                        .HasColumnType("smallint");

                    b.HasKey("TransactionId", "Id", "Seq");

                    b.HasIndex("Id");

                    b.ToTable("HIS_TICKET_STATUS");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("MST_USER_EMAIL_INDEX");

                    b.ToTable("MST_USER");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.UserHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<short>("Operation")
                        .HasColumnType("smallint");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("TransactionId", "Id", "Seq");

                    b.HasIndex("Id");

                    b.ToTable("HIS_USER");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.CategoryHistory", b =>
                {
                    b.HasOne("IssueTracker.Models.Datas.Schemas.Category", "Category")
                        .WithMany("CategoryHistories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("IssueTracker.Models.Datas.Schemas.TableTransaction", "TableTransaction")
                        .WithMany("CategoryHistories")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TableTransaction", b =>
                {
                    b.HasOne("IssueTracker.Models.Datas.Schemas.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.Ticket", b =>
                {
                    b.HasOne("IssueTracker.Models.Datas.Schemas.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.TicketStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TicketHistory", b =>
                {
                    b.HasOne("IssueTracker.Models.Datas.Schemas.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.Ticket", "Ticket")
                        .WithMany("TicketHistories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("IssueTracker.Models.Datas.Schemas.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.TicketStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("IssueTracker.Models.Datas.Schemas.TableTransaction", "TableTransaction")
                        .WithMany("TicketHistories")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.TicketStatusHistory", b =>
                {
                    b.HasOne("IssueTracker.Models.Datas.Schemas.TicketStatus", "TicketStatus")
                        .WithMany("TicketStatusHistories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("IssueTracker.Models.Datas.Schemas.TableTransaction", "TableTransaction")
                        .WithMany("TicketStatusHistories")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTracker.Models.Datas.Schemas.UserHistory", b =>
                {
                    b.HasOne("IssueTracker.Models.Datas.Schemas.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("IssueTracker.Models.Datas.Schemas.TableTransaction", "TableTransaction")
                        .WithMany("UserHistories")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
